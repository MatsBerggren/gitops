apiVersion: v1
kind: Service
metadata:
  name: rmm-api
spec:
  selector: { app: rmm-api }
  ports:
    - name: http
      port: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rmm-api
spec:
  replicas: 1
  selector:
    matchLabels: { app: rmm-api }
  template:
    metadata:
      labels: { app: rmm-api }
    spec:
      imagePullSecrets:
        - name: ghcr-cred
      containers:
        - name: rmm-api
          image: tacticalrmm/tactical:latest
          envFrom:
            - configMapRef: { name: tactical-rmm-config }
            - secretRef: { name: tactical-rmm-secret }
          env:
            - name: DATABASE_URL
              value: "postgres://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)"
            - name: REDIS_URL
              value: "redis://$(REDIS_HOST):$(REDIS_PORT)/0"
          ports:
            - containerPort: 8000
          volumeMounts:
            - name: rmm-data
              mountPath: /app/data
          livenessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "2"
              memory: "2Gi"
      volumes:
        - name: rmm-data
          persistentVolumeClaim:
            claimName: rmm-data-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rmm-data-pvc
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 10Gi
